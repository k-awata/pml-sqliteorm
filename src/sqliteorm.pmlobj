-----------------------------------------------------------------------
--
-- Copyright (c) 2022 K.Awata
--
-- File:        sqliteorm.pmlobj
-- Type:        Object Definition
-- Module:      General Application
-- Description: ORM between PML and SQLite3 database via sqlite3.exe CLI
--
-----------------------------------------------------------------------

define object SQLITEORM
    member .dbFile  is FILE
    member .workIn  is FILE
    member .workOut is FILE
    member .workErr is FILE
    member .exePath is STRING
    member .sqlCmd  is ARRAY
    member .sqlErr  is STRING
endobject

-----------------------------------------------------------------------
--
-- Method:     .sqliteorm(!dbFile is STRING)
--
-- Description: Constructor
--
-----------------------------------------------------------------------
define method .sqliteorm(!dbFile is STRING)
    !this.dbFile = object FILE(!dbFile)
    var !unique unique
    !this.workIn = object FILE('%temp%\sqliteormin' + !unique)
    !this.workOut = object FILE('%temp%\sqliteormout' + !unique)
    !this.workErr = object FILE('%temp%\sqliteormerr' + !unique)
    !this.exePath = !!sqlite3path()
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Execute(!sql is STRING)
--
-- Description: Execute SQL command from a string.
--
-----------------------------------------------------------------------
define method .Execute(!sql is STRING)
    !this.sqlCmd.Clear()
    !this.sqlCmd.Append(!sql)
    !this.Execute(!this.sqlCmd)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Execute(!sql is ARRAY)
--
-- Description: Execute SQL command from an array.
--
-----------------------------------------------------------------------
define method .Execute(!sql is ARRAY)
    !this.workIn.WriteFile('OVERWRITE', !sql)
    !this.runSqlite3(!this.workIn)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Execute(!sql is FILE)
--
-- Description: Execute SQL command from a file.
--
-----------------------------------------------------------------------
define method .Execute(!sql is FILE)
    !this.runSqlite3(!sql)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Query(!sql is STRING)
--
-- Description: Execute SQL command from a string and return RECORDSET object.
--
-----------------------------------------------------------------------
define method .Query(!sql is STRING) is RECORDSET
    !this.sqlCmd.Clear()
    !this.sqlCmd.Append(!sql)
    return !this.Query(!this.sqlCmd)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Query(!sql is ARRAY)
--
-- Description: Execute SQL command from an array and return RECORDSET object.
--
-----------------------------------------------------------------------
define method .Query(!sql is ARRAY) is RECORDSET
    !this.workIn.WriteFile('OVERWRITE', !sql)
    !this.runSqlite3(!this.workIn)
    return !this.fetchRecordset()
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Query(!sql is FILE)
--
-- Description: Execute SQL command from a file and return RECORDSET object.
--
-----------------------------------------------------------------------
define method .Query(!sql is FILE) is RECORDSET
    !this.runSqlite3(!sql)
    return !this.fetchRecordset()
endmethod

-----------------------------------------------------------------------
--
-- Method:     .runSqlite3(!input is FILE)
--
-- Description: Run SQLite3 command in the shell.
--
-----------------------------------------------------------------------
define method .runSqlite3(!input is FILE)
    if not !input.Exists() then
        return error 2 |File $!input does not exist|
    endif
    syscom |$!this.exePath -header -tabs $!this.dbFile < $!input 1> $!this.workOut 2> $!this.workErr|
    if !this.catchError() ne '' then
        return error 1 |SQL execution error "$!this.sqlErr"|
    endif
endmethod

-----------------------------------------------------------------------
--
-- Method:     .catchError()
--
-- Description: Catch error message for last SQL execution.
--
-----------------------------------------------------------------------
define method .catchError() is STRING
    !this.sqlErr = ''
    do !buf values !this.workErr.ReadFile()
        skip if !buf.Trim() eq ''
        !this.sqlErr = !this.sqlErr + ' ' + !buf
    enddo
    !this.sqlErr = !this.sqlErr.Trim()
    return !this.sqlErr
endmethod

-----------------------------------------------------------------------
--
-- Method:     .fetchRecordset()
--
-- Description: Fetch last SQL execution result.
--
-----------------------------------------------------------------------
define method .fetchRecordset() is RECORDSET
    !result = !this.workOut.ReadFile()
    !columns = !result.RemoveFirst().Split('	')
    handle any
        return object RECORDSET()
    endhandle
    !records = object ARRAY()
    do !r values !result
        !record = !r.Split('	')
        skip if !record.Size() ne !columns.Size()
        !records.Append(!record)
    enddo
    return object RECORDSET(!columns, !records)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Select(!table is STRING, !columns is STRINGMAP, !where is STRINGMAP)
--
-- Description: Return RECORDSET object of selected data.
--
-----------------------------------------------------------------------
define method .Select(!table is STRING, !columns is STRINGMAP, !where is STRINGMAP) is RECORDSET
    !this.sqlCmd.Clear()
    !this.sqlCmd.Append('SELECT')
    do !i to !columns.Size()
        !this.sqlCmd.Append(!columns.values[!i])
        !this.sqlCmd.Append(|AS '| + !columns.keys[!i].Replace(|'|, |''|) + |'|)
        skip if !i eq !columns.Size()
        !this.sqlCmd.Append(',')
    enddo
    !this.sqlCmd.Append(|FROM "| + !table.Replace(|"|, |""|) + |"|)
    !this.createWhereClause(!where)
    !this.sqlCmd.Append(';')
    return !this.Query(!this.sqlCmd)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Select(!table is STRING, !columns is STRING, !where is STRINGMAP)
--
-- Description: Return RECORDSET object of selected data.
--
-----------------------------------------------------------------------
define method .Select(!table is STRING, !columns is STRING, !where is STRINGMAP) is RECORDSET
    !this.sqlCmd.Clear()
    !this.sqlCmd.Append('SELECT')
    !this.sqlCmd.Append(!columns)
    !this.sqlCmd.Append(|FROM "| + !table.Replace(|"|, |""|) + |"|)
    !this.createWhereClause(!where)
    !this.sqlCmd.Append(';')
    return !this.Query(!this.sqlCmd)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Insert(!table is STRING, !record is STRINGMAP)
--
-- Description: Insert a new record into a table.
--
-----------------------------------------------------------------------
define method .Insert(!table is STRING, !record is STRINGMAP)
    !records = object RECORDSET()
    !records.Append(!record)
    !this.Insert(!table, !records)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Insert(!table is STRING, !records is RECORDSET)
--
-- Description: Insert new records into a table.
--
-----------------------------------------------------------------------
define method .Insert(!table is STRING, !records is RECORDSET)
    !this.sqlCmd.Clear()
    !this.sqlCmd.Append('INSERT')
    !this.createIntoClause(!table, !records)
    !this.sqlCmd.Append(';')
    !this.Execute(!this.sqlCmd)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Replace(!table is STRING, !record is STRINGMAP)
--
-- Description: Replace an existing record with new data.
--
-----------------------------------------------------------------------
define method .Replace(!table is STRING, !record is STRINGMAP)
    !records = object RECORDSET()
    !records.Append(!record)
    !this.Replace(!table, !records)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Replace(!table is STRING, !records is RECORDSET)
--
-- Description: Replace existing records with new data.
--
-----------------------------------------------------------------------
define method .Replace(!table is STRING, !records is RECORDSET)
    !this.sqlCmd.Clear()
    !this.sqlCmd.Append('REPLACE')
    !this.createIntoClause(!table, !records)
    !this.sqlCmd.Append(';')
    !this.Execute(!this.sqlCmd)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Update(!table is STRING, !record is STRINGMAP, !where is STRINGMAP)
--
-- Description: Update existing records from a table.
--
-----------------------------------------------------------------------
define method .Update(!table is STRING, !record is STRINGMAP, !where is STRINGMAP)
    !this.sqlCmd.Clear()
    !this.sqlCmd.Append(|UPDATE "| + !table.Replace(|"|, |""|) + |"|)
    !this.sqlCmd.Append('SET')
    do !i to !record.Size()
        !this.sqlCmd.Append( $
            |"| + !record.keys[!i].Replace(|"|, |""|) + |" = | + $
            |'| + !record.values[!i].Replace(|'|, |''|) + |'| $
        )
        skip if !i eq !record.Size()
        !this.sqlCmd.Append(',')
    enddo
    !this.createWhereClause(!where)
    !this.sqlCmd.Append(';')
    !this.Execute(!this.sqlCmd)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Delete(!table is STRING, !where is STRINGMAP)
--
-- Description: Delete records from a table.
--
-----------------------------------------------------------------------
define method .Delete(!table is STRING, !where is STRINGMAP)
    !this.sqlCmd.Clear()
    !this.sqlCmd.Append(|DELETE FROM "| + !table.Replace(|"|, |""|) + |"|)
    !this.createWhereClause(!where)
    !this.sqlCmd.Append(';')
    !this.Execute(!this.sqlCmd)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Exists(!table is STRING, !where is STRINGMAP)
--
-- Description: Return whether the specified data exists in a table.
--
-----------------------------------------------------------------------
define method .Exists(!table is STRING, !where is STRINGMAP) is BOOLEAN
    !this.sqlCmd.Clear()
    !this.sqlCmd.Append('SELECT EXISTS(')
    !this.sqlCmd.Append(|SELECT * FROM "| + !table.Replace(|"|, |""|) + |"|)
    !this.createWhereClause(!where)
    !this.sqlCmd.Append(') AS "EXISTS";')
    !result = !this.Query(!this.sqlCmd).First()
    return !result.GetBoolean(!result.keys.First())
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Count(!table is STRING, !where is STRINGMAP)
--
-- Description: Return number of records.
--
-----------------------------------------------------------------------
define method .Count(!table is STRING, !where is STRINGMAP) is REAL
    !this.sqlCmd.Clear()
    !this.sqlCmd.Append(|SELECT COUNT(*) FROM "| + !table.Replace(|"|, |""|) + |"|)
    !this.createWhereClause(!where)
    !this.sqlCmd.Append(';')
    !result = !this.Query(!this.sqlCmd).First()
    return !result.GetReal(!result.keys.First())
endmethod

-----------------------------------------------------------------------
--
-- Method:     .createIntoClause(!table is STRING, !data is RECORDSET)
--
-- Description: Create INTO clause.
--
-----------------------------------------------------------------------
define method .createIntoClause(!table is STRING, !data is RECORDSET)
    !this.sqlCmd.Append(|INTO "| + !table.Replace(|"|, |""|) + |"|)
    !colsize = !data.columns.Size()
    if !colsize eq 0 then
        !this.sqlCmd.Append('DEFAULT VALUES')
        return
    endif
    !this.sqlCmd.Append('(')
    do !i to !colsize
        !this.sqlCmd.Append(|"| + !data.columns[!i].Replace(|"|, |""|) + |"|)
        skip if !i eq !colsize
        !this.sqlCmd.Append(',')
    enddo
    !this.sqlCmd.Append(')')
    !this.sqlCmd.Append('VALUES')
    do !i to !data.records.Size()
        !this.sqlCmd.Append('(')
        do !j to !colsize
            !this.sqlCmd.Append(|'| + !data.records[!i][!j].Replace(|'|, |''|) + |'|)
            skip if !j eq !colsize
            !this.sqlCmd.Append(',')
        enddo
        !this.sqlCmd.Append(')')
        skip if !i eq !data.records.Size()
        !this.sqlCmd.Append(',')
    enddo
endmethod

-----------------------------------------------------------------------
--
-- Method:     .createWhereClause(!where is STRINGMAP)
--
-- Description: Create WHERE clause.
--
-----------------------------------------------------------------------
define method .createWhereClause(!where is STRINGMAP)
    if !where.Empty() then
        return
    endif
    !this.sqlCmd.Append('WHERE')
    do !i to !where.Size()
        !this.sqlCmd.Append( $
            |"| + !where.keys[!i].Replace(|"|, |""|) + |" = | + $
            |'| + !where.values[!i].Replace(|'|, |''|) + |'| $
        )
        skip if !i eq !where.Size()
        !this.sqlCmd.Append('AND')
    enddo
endmethod
