-----------------------------------------------------------------------
--
-- Copyright (c) 2022 K.Awata
--
-- File:        sqliteorm.pmlobj
-- Type:        Object Definition
-- Module:      General Application
-- Description: ORM between PML and SQLite3 database via sqlite3.exe CLI
--
-----------------------------------------------------------------------

define object SQLITEORM
    member .dbFile  is FILE
    member .workIn  is FILE
    member .workOut is FILE
    member .workErr is FILE
    member .exePath is STRING
    member .sqlCmd  is STRING
    member .sqlErr  is STRING
endobject

-----------------------------------------------------------------------
--
-- Method:     .sqliteorm(!dbFile is STRING)
--
-- Description: Constructor
--
-----------------------------------------------------------------------
define method .sqliteorm(!dbFile is STRING)
    !this.dbFile = object FILE(!dbFile)
    var !unique unique
    !this.workIn = object FILE('%temp%\sqliteormin' + !unique)
    !this.workOut = object FILE('%temp%\sqliteormout' + !unique)
    !this.workErr = object FILE('%temp%\sqliteormerr' + !unique)
    !this.exepath = !!sqlite3path()
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Execute(!sql is STRING)
--
-- Description: Execute SQL command.
--
-----------------------------------------------------------------------
define method .Execute(!sql is STRING)
    !this.sqlCmd = !sql
    !this.workIn.Open('OVERWRITE')
    !this.workIn.WriteRecord(!this.sqlCmd)
    !this.workIn.Close()
    !this.runSqlite3(!this.workIn)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Execute(!file is FILE)
--
-- Description: Execute SQL command from a file.
--
-----------------------------------------------------------------------
define method .Execute(!file is FILE)
    !this.runSqlite3(!file)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Query(!sql is STRING)
--
-- Description: Execute SQL command and return RECORDSET object.
--
-----------------------------------------------------------------------
define method .Query(!sql is STRING) is RECORDSET
    !this.sqlCmd = !sql
    !this.workIn.Open('OVERWRITE')
    !this.workIn.WriteRecord(!this.sqlCmd)
    !this.workIn.Close()
    !this.runSqlite3(!this.workIn)
    return !this.fetchRecordset()
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Query(!file is FILE)
--
-- Description: Execute SQL command from a file and return RECORDSET object.
--
-----------------------------------------------------------------------
define method .Query(!file is FILE) is RECORDSET
    !this.runSqlite3(!file)
    return !this.fetchRecordset()
endmethod

-----------------------------------------------------------------------
--
-- Method:     .runSqlite3(!input is FILE)
--
-- Description: Run SQLite3 command in the shell.
--
-----------------------------------------------------------------------
define method .runSqlite3(!input is FILE)
    if not !input.Exists() then
        return error 2 |File $!input does not exist|
    endif
    syscom |$!this.exepath -header -tabs $!this.dbFile < $!input 1> $!this.workOut 2> $!this.workErr|
    if !this.catchError() ne '' then
        return error 1 |SQL execution error "$!this.sqlErr"|
    endif
endmethod

-----------------------------------------------------------------------
--
-- Method:     .catchError()
--
-- Description: Catch error message for last SQL execution.
--
-----------------------------------------------------------------------
define method .catchError() is STRING
    !err = ''
    do !buf values !this.workErr.ReadFile()
        skip if !buf.Trim() eq ''
        !err = !err + ' ' + !buf
    enddo
    !this.sqlErr = !err.Trim()
    return !this.sqlErr
endmethod

-----------------------------------------------------------------------
--
-- Method:     .fetchRecordset()
--
-- Description: Fetch last SQL execution result.
--
-----------------------------------------------------------------------
define method .fetchRecordset() is RECORDSET
    !result = !this.workOut.ReadFile()
    !columns = !result.RemoveFirst().Split('	')
    handle any
        return object RECORDSET()
    endhandle
    !records = object ARRAY()
    do !r values !result
        !record = !r.Split('	')
        skip if !record.Size() ne !columns.Size()
        !records.Append(!record)
    enddo
    return object RECORDSET(!columns, !records)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Select(!table is STRING, !columns is STRING, !where is STRINGMAP)
--
-- Description: Return RECORDSET object of selected data.
--
-----------------------------------------------------------------------
define method .Select(!table is STRING, !columns is STRING, !where is STRINGMAP) is RECORDSET
    return !this.Query('SELECT ' + !columns + | FROM "| + !table.Replace(|"|, |""|) + |"| $
        + !this.createWhereClause(!where) + ';')
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Insert(!table is STRING, !record is STRINGMAP)
--
-- Description: Insert a new record into a table.
--
-----------------------------------------------------------------------
define method .Insert(!table is STRING, !record is STRINGMAP)
    !this.Execute('INSERT' + !this.createIntoClause(!table, !record))
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Insert(!table is STRING, !records is RECORDSET)
--
-- Description: Insert new records into a table.
--
-----------------------------------------------------------------------
define method .Insert(!table is STRING, !records is RECORDSET)
    !this.workIn.Open('OVERWRITE')
    do !r values !records.StringMaps()
        !this.workIn.WriteRecord('INSERT' + !this.createIntoClause(!table, !r))
    enddo
    !this.workIn.Close()
    !this.runSqlite3(!this.workIn)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Replace(!table is STRING, !record is STRINGMAP)
--
-- Description: Replace an existing record with new data.
--
-----------------------------------------------------------------------
define method .Replace(!table is STRING, !record is STRINGMAP)
    !this.Execute('REPLACE' + !this.createIntoClause(!table, !record))
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Replace(!table is STRING, !records is RECORDSET)
--
-- Description: Replace existing records with new data.
--
-----------------------------------------------------------------------
define method .Replace(!table is STRING, !records is RECORDSET)
    !this.workIn.Open('OVERWRITE')
    do !r values !records.StringMaps()
        !this.workIn.WriteRecord('REPLACE' + !this.createIntoClause(!table, !r))
    enddo
    !this.workIn.Close()
    !this.runSqlite3(!this.workIn)
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Update(!table is STRING, !record is STRINGMAP, !where is STRINGMAP)
--
-- Description: Update existing records from a table.
--
-----------------------------------------------------------------------
define method .Update(!table is STRING, !record is STRINGMAP, !where is STRINGMAP)
    !chain = |UPDATE "| + !table.Replace(|"|, |""|) + |" SET |
    do !i to !record.Size()
        !chain = !chain + |"| + !record.keys[!i].Replace(|"|, |""|) $
            + |" = '| + !record.values[!i].Replace(|'|, |''|) + |'|
        skip if !i eq !record.Size()
        !chain = !chain + ','
    enddo
    !this.Execute(!chain + !this.createWhereClause(!where) + ';')
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Delete(!table is STRING, !where is STRINGMAP)
--
-- Description: Delete records from a table.
--
-----------------------------------------------------------------------
define method .Delete(!table is STRING, !where is STRINGMAP)
    !this.Execute(|DELETE FROM "| + !table.Replace(|"|, |""|) + |"| $
        + !this.createWhereClause(!where) + ';')
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Exists(!table is STRING, !where is STRINGMAP)
--
-- Description: Return whether the specified data exists in a table.
--
-----------------------------------------------------------------------
define method .Exists(!table is STRING, !where is STRINGMAP) is BOOLEAN
    !record = !this.Query(|SELECT EXISTS(SELECT * FROM "| + !table.Replace(|"|, |""|) + |"| $
        + !this.createWhereClause(!where) + ');').First()
    return !record.GetBoolean(!record.keys.First())
endmethod

-----------------------------------------------------------------------
--
-- Method:     .Count(!table is STRING, !where is STRINGMAP)
--
-- Description: Return number of records.
--
-----------------------------------------------------------------------
define method .Count(!table is STRING, !where is STRINGMAP) is REAL
    !record = !this.Query(|SELECT COUNT(*) FROM "| + !table.Replace(|"|, |""|) + |"| $
        + !this.createWhereClause(!where) + ';').First()
    return !record.GetReal(!record.keys.First())
endmethod

-----------------------------------------------------------------------
--
-- Method:     .createIntoClause(!table is STRING, !data is STRINGMAP)
--
-- Description: Return INTO clause string.
--
-----------------------------------------------------------------------
define method .createIntoClause(!table is STRING, !data is STRINGMAP) is STRING
    !into = | INTO "| + !table.Replace(|"|, |""|) + |" |
    if !data.Empty() then
        return !into + 'DEFAULT VALUES;'
    endif
    !colChain = ''
    !valChain = ''
    do !i to !data.Size()
        !colChain = !colChain + |"| + !data.keys[!i].Replace(|"|, |""|) + |"|
        !valChain = !valChain + |'| + !data.values[!i].Replace(|'|, |''|) + |'|
        skip if !i eq !data.Size()
        !colChain = !colChain + ','
        !valChain = !valChain + ','
    enddo
    return !into + '(' + !colChain + ') VALUES (' + !valChain + ');'
endmethod

-----------------------------------------------------------------------
--
-- Method:     .createWhereClause(!where is STRINGMAP)
--
-- Description: Return WHERE clause string.
--
-----------------------------------------------------------------------
define method .createWhereClause(!where is STRINGMAP) is STRING
    if !where.Empty() then
        return ''
    endif
    !chain = ' WHERE '
    do !i to !where.Size()
        !chain = !chain + |"| + !where.keys[!i].Replace(|"|, |""|) $
            + |" = '| + !where.values[!i].Replace(|'|, |''|) + |'|
        skip if !i eq !where.Size()
        !chain = !chain + ' AND '
    enddo
    return !chain
endmethod
