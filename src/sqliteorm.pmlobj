-- Copyright (c) 2022 K.Awata
-- 
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
-- 
-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.
-- 
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.

-- Object SQLITEORM is ORM between PML and SQLite3 database via sqlite3.exe CLI.
define object SQLITEORM
    member .dbFile      is FILE
    member .workIn      is FILE
    member .workOut     is FILE
    member .workErr     is FILE
    member .exePath     is STRING
    member .transaction is BOOLEAN
    member .sqlCmd      is ARRAY
    member .sqlErr      is STRING
endobject

-- Constructor sets path of a sqlite3 DB file.
define method .sqliteorm(!dbFile is STRING)
    !this.dbFile = object FILE(!dbFile)
    var !unique unique
    !this.workIn = object FILE('%temp%\sqliteormin' + !unique)
    !this.workOut = object FILE('%temp%\sqliteormout' + !unique)
    !this.workErr = object FILE('%temp%\sqliteormerr' + !unique)
    !this.exePath = !!sqlite3path()
    !this.transaction = false
endmethod

-- Execute executes SQL command from a STRING.
define method .Execute(!sql is STRING)
    !this.clearSQL()
    !this.sqlCmd.Append(!sql)
    !this.Execute(!this.sqlCmd)
endmethod

-- Execute executes SQL command from a ARRAY.
define method .Execute(!sql is ARRAY)
    if !this.transaction then
        return
    endif
    !this.workIn.WriteFile('OVERWRITE', !sql)
    !this.runSqlite3(!this.workIn)
endmethod

-- Execute executes SQL command from a FILE.
define method .Execute(!sql is FILE)
    !this.runSqlite3(!sql)
endmethod

-- Query executes SQL command from a STRING and returns RECORDSET.
define method .Query(!sql is STRING) is RECORDSET
    !this.checkTransaction()
    !this.clearSQL()
    !this.sqlCmd.Append(!sql)
    return !this.Query(!this.sqlCmd)
endmethod

-- Query executes SQL command from a ARRAY and returns RECORDSET.
define method .Query(!sql is ARRAY) is RECORDSET
    !this.workIn.WriteFile('OVERWRITE', !sql)
    !this.runSqlite3(!this.workIn)
    return !this.fetchRecordset()
endmethod

-- Query executes SQL command from a FILE and returns RECORDSET.
define method .Query(!sql is FILE) is RECORDSET
    !this.runSqlite3(!sql)
    return !this.fetchRecordset()
endmethod

-- runSqlite3 runs SQLite3 command in the system command line.
define method .runSqlite3(!input is FILE)
    if not !input.Exists() then
        return error 2 |File $!input does not exist|
    endif
    syscom |$!this.exePath -header -tabs $!this.dbFile < $!input 1> $!this.workOut 2> $!this.workErr|
    if !this.catchError() ne '' then
        return error 1 |SQL execution error "$!this.sqlErr"|
    endif
endmethod

-- catchError catches an error message for the last SQL execution.
define method .catchError() is STRING
    !this.sqlErr = ''
    do !buf values !this.workErr.ReadFile()
        skip if !buf.Trim() eq ''
        !this.sqlErr = !this.sqlErr + ' ' + !buf
    enddo
    !this.sqlErr = !this.sqlErr.Trim()
    return !this.sqlErr
endmethod

-- fetchRecordset fetches the last SQL execution result.
define method .fetchRecordset() is RECORDSET
    !result = !this.workOut.ReadFile()
    !columns = !result.RemoveFirst().Split('	')
    handle any
        return object RECORDSET()
    endhandle
    !records = object ARRAY()
    do !r values !result
        !record = !r.Split('	')
        skip if !record.Size() ne !columns.Size()
        !records.Append(!record)
    enddo
    return object RECORDSET(!columns, !records)
endmethod

-- checkTransaction throws an error if the transaction is in progress.
define method .checkTransaction()
    if !this.transaction then
        return error 1 'This method cannot be called while transaction is in progress'
    endif
endmethod

-- clearSQL clears SQL commands in not progress.
define method .clearSQL()
    if !this.transaction then
        return
    endif
    !this.sqlCmd.Clear()
endmethod

-- BeginTransaction begins a transaction.
define method .BeginTransaction()
    !this.checkTransaction()
    !this.clearSQL()
    !this.sqlCmd.Append('BEGIN TRANSACTION;')
    !this.transaction = true
endmethod

-- Rollback rollbacks a transaction.
define method .Rollback()
    if not !this.transaction then
        return error 1 'Transaction has not begun'
    endif
    !this.transaction = false
endmethod

-- Commit commits a transaction.
define method .Commit()
    if not !this.transaction then
        return error 1 'Transaction has not begun'
    endif
    !this.sqlCmd.Append('COMMIT;')
    !this.transaction = false
    !this.Execute(!this.sqlCmd)
endmethod

-- Select returns RECORDSET of selected data.
define method .Select(!table is STRING, !columns is STRINGMAP, !where is STRINGMAP) is RECORDSET
    !this.checkTransaction()
    !this.clearSQL()
    !this.sqlCmd.Append('SELECT')
    do !i to !columns.Size()
        !this.sqlCmd.Append(!columns.values[!i])
        !this.sqlCmd.Append(|AS '| + !columns.keys[!i].Replace(|'|, |''|) + |'|)
        skip if !i eq !columns.Size()
        !this.sqlCmd.Append(',')
    enddo
    !this.sqlCmd.Append(|FROM "| + !table.Replace(|"|, |""|) + |"|)
    !this.createWhereClause(!where)
    !this.sqlCmd.Append(';')
    return !this.Query(!this.sqlCmd)
endmethod

-- Select returns RECORDSET of selected data.
define method .Select(!table is STRING, !columns is STRING, !where is STRINGMAP) is RECORDSET
    !this.checkTransaction()
    !this.clearSQL()
    !this.sqlCmd.Append('SELECT')
    !this.sqlCmd.Append(!columns)
    !this.sqlCmd.Append(|FROM "| + !table.Replace(|"|, |""|) + |"|)
    !this.createWhereClause(!where)
    !this.sqlCmd.Append(';')
    return !this.Query(!this.sqlCmd)
endmethod

-- Insert inserts a new record into a table.
define method .Insert(!table is STRING, !record is STRINGMAP)
    !records = object RECORDSET()
    !records.Append(!record)
    !this.Insert(!table, !records)
endmethod

-- Insert inserts new records into a table.
define method .Insert(!table is STRING, !records is RECORDSET)
    !this.clearSQL()
    !this.sqlCmd.Append('INSERT')
    !this.createIntoClause(!table, !records)
    !this.sqlCmd.Append(';')
    !this.Execute(!this.sqlCmd)
endmethod

-- Replace replaces an existing record with new data.
define method .Replace(!table is STRING, !record is STRINGMAP)
    !records = object RECORDSET()
    !records.Append(!record)
    !this.Replace(!table, !records)
endmethod

-- Replace replaces existing records with new data.
define method .Replace(!table is STRING, !records is RECORDSET)
    !this.clearSQL()
    !this.sqlCmd.Append('REPLACE')
    !this.createIntoClause(!table, !records)
    !this.sqlCmd.Append(';')
    !this.Execute(!this.sqlCmd)
endmethod

-- Update updates existing records from a table.
define method .Update(!table is STRING, !record is STRINGMAP, !where is STRINGMAP)
    !this.clearSQL()
    !this.sqlCmd.Append(|UPDATE "| + !table.Replace(|"|, |""|) + |"|)
    !this.sqlCmd.Append('SET')
    do !i to !record.Size()
        !this.sqlCmd.Append( $
            |"| + !record.keys[!i].Replace(|"|, |""|) + |" = | + $
            |'| + !record.values[!i].Replace(|'|, |''|) + |'| $
        )
        skip if !i eq !record.Size()
        !this.sqlCmd.Append(',')
    enddo
    !this.createWhereClause(!where)
    !this.sqlCmd.Append(';')
    !this.Execute(!this.sqlCmd)
endmethod

-- Delete deletes records from a table.
define method .Delete(!table is STRING, !where is STRINGMAP)
    !this.clearSQL()
    !this.sqlCmd.Append(|DELETE FROM "| + !table.Replace(|"|, |""|) + |"|)
    !this.createWhereClause(!where)
    !this.sqlCmd.Append(';')
    !this.Execute(!this.sqlCmd)
endmethod

-- Exists returns whether the specified data exists in a table.
define method .Exists(!table is STRING, !where is STRINGMAP) is BOOLEAN
    !this.checkTransaction()
    !this.clearSQL()
    !this.sqlCmd.Append('SELECT EXISTS(')
    !this.sqlCmd.Append(|SELECT * FROM "| + !table.Replace(|"|, |""|) + |"|)
    !this.createWhereClause(!where)
    !this.sqlCmd.Append(') AS "EXISTS";')
    !result = !this.Query(!this.sqlCmd).First()
    return !result.GetBoolean(!result.keys.First())
endmethod

-- Count returns the number of records.
define method .Count(!table is STRING, !where is STRINGMAP) is REAL
    !this.checkTransaction()
    !this.clearSQL()
    !this.sqlCmd.Append(|SELECT COUNT(*) FROM "| + !table.Replace(|"|, |""|) + |"|)
    !this.createWhereClause(!where)
    !this.sqlCmd.Append(';')
    !result = !this.Query(!this.sqlCmd).First()
    return !result.GetReal(!result.keys.First())
endmethod

-- createIntoClause creates INTO clause.
define method .createIntoClause(!table is STRING, !data is RECORDSET)
    !this.sqlCmd.Append(|INTO "| + !table.Replace(|"|, |""|) + |"|)
    !colsize = !data.columns.Size()
    if !colsize eq 0 then
        !this.sqlCmd.Append('DEFAULT VALUES')
        return
    endif
    !this.sqlCmd.Append('(')
    do !i to !colsize
        !this.sqlCmd.Append(|"| + !data.columns[!i].Replace(|"|, |""|) + |"|)
        skip if !i eq !colsize
        !this.sqlCmd.Append(',')
    enddo
    !this.sqlCmd.Append(')')
    !this.sqlCmd.Append('VALUES')
    do !i to !data.records.Size()
        !this.sqlCmd.Append('(')
        do !j to !colsize
            !this.sqlCmd.Append(|'| + !data.records[!i][!j].Replace(|'|, |''|) + |'|)
            skip if !j eq !colsize
            !this.sqlCmd.Append(',')
        enddo
        !this.sqlCmd.Append(')')
        skip if !i eq !data.records.Size()
        !this.sqlCmd.Append(',')
    enddo
endmethod

-- createWhereClause creates WHERE clause.
define method .createWhereClause(!where is STRINGMAP)
    if !where.Empty() then
        return
    endif
    !this.sqlCmd.Append('WHERE')
    do !i to !where.Size()
        !this.sqlCmd.Append( $
            |"| + !where.keys[!i].Replace(|"|, |""|) + |" = | + $
            |'| + !where.values[!i].Replace(|'|, |''|) + |'| $
        )
        skip if !i eq !where.Size()
        !this.sqlCmd.Append('AND')
    enddo
endmethod
